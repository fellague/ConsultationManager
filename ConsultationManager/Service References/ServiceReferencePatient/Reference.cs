//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsultationManager.ServiceReferencePatient {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferencePatient.IPatientService")]
    public interface IPatientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/GetAllPatients", ReplyAction="http://tempuri.org/IPatientService/GetAllPatientsResponse")]
        ConsultationManagerServer.Models.Patient[] GetAllPatients(string idService);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/GetAllPatients", ReplyAction="http://tempuri.org/IPatientService/GetAllPatientsResponse")]
        System.Threading.Tasks.Task<ConsultationManagerServer.Models.Patient[]> GetAllPatientsAsync(string idService);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/AddPatient", ReplyAction="http://tempuri.org/IPatientService/AddPatientResponse")]
        ConsultationManagerServer.Models.Patient AddPatient(ConsultationManagerServer.Models.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/AddPatient", ReplyAction="http://tempuri.org/IPatientService/AddPatientResponse")]
        System.Threading.Tasks.Task<ConsultationManagerServer.Models.Patient> AddPatientAsync(ConsultationManagerServer.Models.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/UpdatePatient", ReplyAction="http://tempuri.org/IPatientService/UpdatePatientResponse")]
        ConsultationManagerServer.Models.Patient UpdatePatient(ConsultationManagerServer.Models.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/UpdatePatient", ReplyAction="http://tempuri.org/IPatientService/UpdatePatientResponse")]
        System.Threading.Tasks.Task<ConsultationManagerServer.Models.Patient> UpdatePatientAsync(ConsultationManagerServer.Models.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/DeletePatient", ReplyAction="http://tempuri.org/IPatientService/DeletePatientResponse")]
        void DeletePatient(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/DeletePatient", ReplyAction="http://tempuri.org/IPatientService/DeletePatientResponse")]
        System.Threading.Tasks.Task DeletePatientAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPatientServiceChannel : ConsultationManager.ServiceReferencePatient.IPatientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PatientServiceClient : System.ServiceModel.ClientBase<ConsultationManager.ServiceReferencePatient.IPatientService>, ConsultationManager.ServiceReferencePatient.IPatientService {
        
        public PatientServiceClient() {
        }
        
        public PatientServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PatientServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PatientServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PatientServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ConsultationManagerServer.Models.Patient[] GetAllPatients(string idService) {
            return base.Channel.GetAllPatients(idService);
        }
        
        public System.Threading.Tasks.Task<ConsultationManagerServer.Models.Patient[]> GetAllPatientsAsync(string idService) {
            return base.Channel.GetAllPatientsAsync(idService);
        }
        
        public ConsultationManagerServer.Models.Patient AddPatient(ConsultationManagerServer.Models.Patient patient) {
            return base.Channel.AddPatient(patient);
        }
        
        public System.Threading.Tasks.Task<ConsultationManagerServer.Models.Patient> AddPatientAsync(ConsultationManagerServer.Models.Patient patient) {
            return base.Channel.AddPatientAsync(patient);
        }
        
        public ConsultationManagerServer.Models.Patient UpdatePatient(ConsultationManagerServer.Models.Patient patient) {
            return base.Channel.UpdatePatient(patient);
        }
        
        public System.Threading.Tasks.Task<ConsultationManagerServer.Models.Patient> UpdatePatientAsync(ConsultationManagerServer.Models.Patient patient) {
            return base.Channel.UpdatePatientAsync(patient);
        }
        
        public void DeletePatient(string id) {
            base.Channel.DeletePatient(id);
        }
        
        public System.Threading.Tasks.Task DeletePatientAsync(string id) {
            return base.Channel.DeletePatientAsync(id);
        }
    }
}
