//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsultationManager.ServiceReferencePlanning {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferencePlanning.IPlanningService")]
    public interface IPlanningService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanningService/GetAllPlannings", ReplyAction="http://tempuri.org/IPlanningService/GetAllPlanningsResponse")]
        ConsultationManagerServer.Models.SerializedModels.ConsultationMedecinsPlanning[] GetAllPlannings(string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanningService/GetAllPlannings", ReplyAction="http://tempuri.org/IPlanningService/GetAllPlanningsResponse")]
        System.Threading.Tasks.Task<ConsultationManagerServer.Models.SerializedModels.ConsultationMedecinsPlanning[]> GetAllPlanningsAsync(string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanningService/GetPlanning", ReplyAction="http://tempuri.org/IPlanningService/GetPlanningResponse")]
        ConsultationManagerServer.Models.SerializedModels.ConsultationMedecinsPlanning GetPlanning(string consultationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanningService/GetPlanning", ReplyAction="http://tempuri.org/IPlanningService/GetPlanningResponse")]
        System.Threading.Tasks.Task<ConsultationManagerServer.Models.SerializedModels.ConsultationMedecinsPlanning> GetPlanningAsync(string consultationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanningService/UpdatePlanning", ReplyAction="http://tempuri.org/IPlanningService/UpdatePlanningResponse")]
        ConsultationManagerServer.Models.Planning UpdatePlanning(ConsultationManagerServer.Models.Planning planning);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanningService/UpdatePlanning", ReplyAction="http://tempuri.org/IPlanningService/UpdatePlanningResponse")]
        System.Threading.Tasks.Task<ConsultationManagerServer.Models.Planning> UpdatePlanningAsync(ConsultationManagerServer.Models.Planning planning);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlanningServiceChannel : ConsultationManager.ServiceReferencePlanning.IPlanningService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlanningServiceClient : System.ServiceModel.ClientBase<ConsultationManager.ServiceReferencePlanning.IPlanningService>, ConsultationManager.ServiceReferencePlanning.IPlanningService {
        
        public PlanningServiceClient() {
        }
        
        public PlanningServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlanningServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlanningServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlanningServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ConsultationManagerServer.Models.SerializedModels.ConsultationMedecinsPlanning[] GetAllPlannings(string serviceId) {
            return base.Channel.GetAllPlannings(serviceId);
        }
        
        public System.Threading.Tasks.Task<ConsultationManagerServer.Models.SerializedModels.ConsultationMedecinsPlanning[]> GetAllPlanningsAsync(string serviceId) {
            return base.Channel.GetAllPlanningsAsync(serviceId);
        }
        
        public ConsultationManagerServer.Models.SerializedModels.ConsultationMedecinsPlanning GetPlanning(string consultationId) {
            return base.Channel.GetPlanning(consultationId);
        }
        
        public System.Threading.Tasks.Task<ConsultationManagerServer.Models.SerializedModels.ConsultationMedecinsPlanning> GetPlanningAsync(string consultationId) {
            return base.Channel.GetPlanningAsync(consultationId);
        }
        
        public ConsultationManagerServer.Models.Planning UpdatePlanning(ConsultationManagerServer.Models.Planning planning) {
            return base.Channel.UpdatePlanning(planning);
        }
        
        public System.Threading.Tasks.Task<ConsultationManagerServer.Models.Planning> UpdatePlanningAsync(ConsultationManagerServer.Models.Planning planning) {
            return base.Channel.UpdatePlanningAsync(planning);
        }
    }
}
